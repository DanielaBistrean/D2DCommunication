//
// Generated file, do not edit! Created by nedtool 5.4 from FileInfoMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __FILEINFOMESSAGE_M_H
#define __FILEINFOMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    typedef std::vector<int> BlockVector;
// }}

/**
 * Class generated from <tt>FileInfoMessage.msg:27</tt> by nedtool.
 * <pre>
 * message FileInfoMessage
 * {
 *     BlockVector blocks;
 *     int fileId;
 *     int uId;
 *     int numBlocks;
 * }
 * </pre>
 */
class FileInfoMessage : public ::omnetpp::cMessage
{
  protected:
    BlockVector blocks;
    int fileId;
    int uId;
    int numBlocks;

  private:
    void copy(const FileInfoMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FileInfoMessage&);

  public:
    FileInfoMessage(const char *name=nullptr, short kind=0);
    FileInfoMessage(const FileInfoMessage& other);
    virtual ~FileInfoMessage();
    FileInfoMessage& operator=(const FileInfoMessage& other);
    virtual FileInfoMessage *dup() const override {return new FileInfoMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual BlockVector& getBlocks();
    virtual const BlockVector& getBlocks() const {return const_cast<FileInfoMessage*>(this)->getBlocks();}
    virtual void setBlocks(const BlockVector& blocks);
    virtual int getFileId() const;
    virtual void setFileId(int fileId);
    virtual int getUId() const;
    virtual void setUId(int uId);
    virtual int getNumBlocks() const;
    virtual void setNumBlocks(int numBlocks);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FileInfoMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FileInfoMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __FILEINFOMESSAGE_M_H

